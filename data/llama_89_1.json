{"text":"OpenAI Pydantic Program Extraction into Album Extracting List of Album with Parallel Function Calling Extraction into Album Streaming Extraction into DirectoryTree object Without docstring in Model With docstring in Model  Getting Started Use Cases Understanding Optimizing Module Guides API Reference Community Contributing Changes  This guide shows you how to generate structured data with new OpenAI API via LlamaIndex The user just needs to specify a Pydantic object We demonstrate two settings Extraction into an Album object which can contain a list of Song objects Extraction into a DirectoryTree object which can contain recursive Node objects This is a simple example of parsing an output into an Album schema which can contain multiple songs If you re opening this Notebook on colab you will probably need to install LlamaIndex Define output schema without docstring Define openai pydantic program Run program to get structured output Run program to get structured output The output is a valid Pydantic object that we can then use to call functions APIs With the latest parallel function calling feature from OpenAI we can simultaneously extract multiple structured data from a single prompt To do this we need to pick one of the latest models e g gpt 3 5 turbo 1106 and set allow_multiple to True in our OpenAIPydanticProgram if not it will only return the first object and raise a warning The output is a list of valid Pydantic object We also support streaming a list of objects through our stream_list function Full credits to this idea go to openai_function_call repo https github com jxnl openai_function_call tree main examples streaming_multitask This is directly inspired by jxnl s awesome repo here https github com jxnl openai_function_call That repository shows how you can use OpenAI s function API to parse recursive Pydantic objects The main requirement is that you want to wrap a recursive Pydantic object with a non recursive one Here we show an example in a directory setting where a DirectoryTree object wraps recursive Node objects to parse a file structure The output is a full DirectoryTree structure with recursive Node objects","link":"https://docs.llamaindex.ai/en/stable/examples/output_parsing/openai_pydantic_program.html"}