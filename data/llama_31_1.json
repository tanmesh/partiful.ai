{"text":"Usage Pattern Getting Started Defining Tools Lower Level API Customizing your Agent Advanced Concepts for OpenAIAgent in beta Query Engine Tools Use other agents as Tools Function Retrieval Agents Context Retrieval Agents Query Planning  Getting Started Use Cases Understanding Optimizing Module Guides API Reference Community Contributing Changes An agent is initialized from a set of Tools Here s an example of instantiating a ReActagent from a set of Tools An agent supports both chat and query endpoints inheriting from our ChatEngine and QueryEngine respectively Example usage To automatically pick the best agent depending on the LLM you can use the from_llm method to generate an agent It is easy to wrap query engines as tools for an agent as well Simply do the following A nifty feature of our agents is that since they inherit from BaseQueryEngine you can easily define other agents as toolsthrough our QueryEngineTool The OpenAIAgent and ReActAgent are simple wrappers on top of an AgentRunner interacting with an AgentWorker All agents can be defined this manner For example for the OpenAIAgent This is also the preferred format for custom agents Check out the lower level agent guide for more details If you wish to customize your agent you can choose to subclass the CustomSimpleAgentWorker and plug it into an AgentRunner see above Check out our Custom Agent Notebook Guide for more details You can also use agents in more advanced settings For instance being able to retrieve tools from an index during query time andbeing able to perform query planning over an existing set of Tools These are largely implemented with our OpenAIAgent classes which depend on the OpenAI Function API Supportfor our more general ReActAgent is something we re actively investigating NOTE these are largely still in beta The abstractions may change and become more general over time If the set of Tools is very large you can create an ObjectIndex to index the tools and then pass in an ObjectRetriever to the agent during query time to first dynamically retrieve the relevant tools before having the agent pick from the candidate tools We first build an ObjectIndex over an existing set of Tools We then define our FnRetrieverOpenAIAgent Our context augmented OpenAI Agent will always perform retrieval before calling any tools This helps to provide additional context that can help the agent better pick Tools versusjust trying to make a decision without any context OpenAI Function Agents can be capable of advanced query planning The trick is to provide the agentwith a QueryPlanTool if the agent calls the QueryPlanTool it is forced to infer a full Pydantic schema representing a queryplan over a set of subtools","link":"https://docs.llamaindex.ai/en/stable/module_guides/deploying/agents/usage_pattern.html"}