{"text":"OpenAI Assistant Advanced Retrieval Cookbook Joint QA and Summarization AutoRetrieval from a Vector Database Joint Text to SQL and Semantic Search Load Data Setup Vector Summary Indexes Query Engines Tools Define Assistant Agent Define Function Tool Initialize Agent Load and Index Structured Data Load and Index Unstructured Data Define Query Engines Tools Initialize Agent Results A bit flaky Getting Started Use Cases Understanding Optimizing Module Guides API Reference Community Contributing Changes  In this notebook we try out OpenAI Assistant API for advanced retrieval tasks by plugging in a variety of query engine tools and datasets The wrapper abstraction we use is our OpenAIAssistantAgent class which allows us to plug in custom tools We explore how OpenAIAssistant can complement replace existing workflows solved by our retrievers query engines through its agent execution function calling loop Joint QA Summarization Auto retrieval Joint SQL and vector search In this section we show how we can get the Assistant agent to both answer fact based questions and summarization questions This is something that the in house retrieval tool struggles to accomplish Our existing auto retrieval capabilities in VectorIndexAutoRetriever allow an LLM to infer the right query parameters for a vector database including both the query string and metadata filter Since the Assistant API can call functions infer function parameters we explore its capabilities in performing auto retrieval here If you re opening this Notebook on colab you will probably need to install LlamaIndex Here we define the function interface which is passed to OpenAI to perform auto retrieval We were not able to get OpenAI to work with nested pydantic objects or tuples as arguments so we converted the metadata filter keys and values into lists for the function API to work with This is currenty handled by our SQLAutoVectorQueryEngine Let s try implementing this by giving our OpenAIAssistantAgent access to two query tools SQL and Vector search We load sample structured datapoints into a SQL db and index it We load unstructured data into a vector index backed by Pinecone","link":"https://docs.llamaindex.ai/en/stable/examples/agent/openai_assistant_query_cookbook.html"}