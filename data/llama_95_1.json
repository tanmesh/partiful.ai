{"text":"OpenAI Agent Query Engine Experimental Cookbook AutoRetrieval from a Vector Database Joint Text to SQL and Semantic Search Define Function Tool Initialize Agent Load and Index Structured Data Load and Index Unstructured Data Define Query Engines Tools Initialize Agent  Getting Started Use Cases Understanding Optimizing Module Guides API Reference Community Contributing Changes  In this notebook we try out the OpenAIAgent across a variety of query engine tools and datasets We explore how OpenAIAgent can compare replace existing workflows solved by our retrievers query engines Auto retrieval Joint SQL and vector search Our existing auto retrieval capabilities in VectorIndexAutoRetriever allow an LLM to infer the right query parameters for a vector database including both the query string and metadata filter Since the OpenAI Function API can infer function parameters we explore its capabilities in performing auto retrieval here If you re opening this Notebook on colab you will probably need to install LlamaIndex Here we define the function interface which is passed to OpenAI to perform auto retrieval We were not able to get OpenAI to work with nested pydantic objects or tuples as arguments so we converted the metadata filter keys and values into lists for the function API to work with Define AutoRetrieve Functions This is currently handled by our SQLAutoVectorQueryEngine Let s try implementing this by giving our OpenAIAgent access to two query tools SQL and Vector We load sample structured datapoints into a SQL db and index it We load unstructured data into a vector index backed by Pinecone","link":"https://docs.llamaindex.ai/en/stable/examples/agent/openai_agent_query_cookbook.html"}