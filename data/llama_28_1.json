{"text":"Retrieval Augmented OpenAI Agent Initial Setup Building an Object Index Our FnRetrieverOpenAIAgent Implementation   Getting Started Use Cases Understanding Optimizing Module Guides API Reference Community Contributing Changes  In this tutorial we show you how to use our FnRetrieverOpenAI implementationto build an agent on top of OpenAI s function API and store index an arbitrary number of tools Our indexing retrieval modules help to remove the complexity of having too many functions to fit in the prompt Let s start by importing some simple building blocks The main thing we need is the OpenAI API a place to keep conversation history a definition for tools that our agent can use If you re opening this Notebook on colab you will probably need to install LlamaIndex Let s define some very simple calculator tools for our agent We have an ObjectIndex construct in LlamaIndex that allows the user to use our index data structures over arbitrary objects The ObjectIndex will handle serialiation to from the object and use an underying index e g VectorStoreIndex SummaryIndex KeywordTableIndex as the storage mechanism In this case we have a large collection of Tool objects and we d want to define an ObjectIndex over these Tools The index comes bundled with a retrieval mechanism an ObjectRetriever This can be passed in to our agent so that it canperform Tool retrieval during query time We provide a FnRetrieverOpenAIAgent implementation in LlamaIndex which can take in an ObjectRetriever over a set of BaseTool objects During query time we would first use the ObjectRetriever to retrieve a set of relevant Tools These tools would then be passed into the agent more specifically their function signatures would be passed into the OpenAI Function calling API","link":"https://docs.llamaindex.ai/en/stable/examples/agent/openai_agent_retrieval.html"}