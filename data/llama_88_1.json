{"text":"Building a Custom Agent Setup the Custom Agent Setup Data and Tools Build Custom Agent Try Out Some Queries Refresher Creating a Custom Agent Worker Subclass Setup SQL DB Tool Setup Vector Tools  Getting Started Use Cases Understanding Optimizing Module Guides API Reference Community Contributing Changes In this cookbook we show you how to build a custom agent using LlamaIndex The easiest way to build a custom agent is to simply subclass CustomSimpleAgentWorker and implement a few required functions You have complete flexibility in defining the agent step wise logic This lets you add arbitrarily complex reasoning logic on top of your RAG pipeline We show you how to build a simple agent that adds a retry layer on top of a RouterQueryEngine allowing it to retry queries until the task is complete We build this on top of both a SQL tool and a vector index query tool Even if the tool makes an error or only answers part of the question the agent can continue retrying the question until the task is complete Here we setup the custom agent An agent in LlamaIndex consists of both an agent runner agent worker An agent runner is an orchestrator that stores state like memory whereas an agent worker controls the step wise execution of a Task Agent runners include sequential parallel execution More details can be found in our lower level API guide Most core agent logic e g ReAct function calling loops can be executed in the agent worker Therefore we ve made it easy to subclass an agent worker letting you plug it into any agent runner As mentioned above we subclass CustomSimpleAgentWorker This is a class that already sets up some scaffolding for you This includes being able to take in tools callbacks LLM and also ensures that the state steps are properly formatted In the meantime you mostly have to implement the following functions _initialize_state _run_step _finalize_task Some additional notes You can implement _arun_step as well if you want to support async chat in the agent You can choose to override __init__ as long as you pass all remaining args kwargs to super CustomSimpleAgentWorker is implemented as a Pydantic BaseModel meaning that you can define your own custom properties as well Here are the full set of base properties on each CustomSimpleAgentWorker that you need to can pass in when constructing your custom agent tools Sequence BaseTool tool_retriever Optional ObjectRetriever BaseTool llm LLM callback_manager CallbackManager verbose bool Note that tools and tool_retriever are mutually exclusive you can only pass in one or the either e g define a static list of tools or define a callable function that returns relevant tools given a user message You can call get_tools message str to return relevant tools given a message All of these properties are accessible via self when defining your custom agent Here we define some helper variables and methods E g the prompt template to use to detect errors as well as the response format in Pydantic We setup both a SQL Tool as well as vector index tools for each city","link":"https://docs.llamaindex.ai/en/stable/examples/agent/custom_agent.html"}