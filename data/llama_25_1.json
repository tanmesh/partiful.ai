{"text":"Retriever Router Query Engine Setup Load Data Define Summary Index and Vector Index over Same Data Define Query Engine and Tool for these Indices Define Retrieval Augmented Router Query Engine   Getting Started Use Cases Understanding Optimizing Module Guides API Reference Community Contributing Changes  In this tutorial we define a router query engine based on a retriever The retriever will select a set of nodes and we will in turn select the right QueryEngine We use our new ToolRetrieverRouterQueryEngine class for this If you re opening this Notebook on colab you will probably need to install LlamaIndex Download Data We first show how to convert a Document into a set of Nodes and insert into a DocumentStore We define a Query Engine for each Index We then wrap these with our QueryEngineTool We define a router query engine that s augmented with a retrieval mechanism to help deal with the case when the set of choices is too large To do this we first define an ObjectIndex over the set of query engine tools The ObjectIndex is defined an underlying index data structure e g a vector index keyword index and can serialize QueryEngineTool objects to from our indices We then use our ToolRetrieverRouterQueryEngine class and pass in an ObjectRetriever over QueryEngineTool objects The ObjectRetriever corresponds to our ObjectIndex This retriever can then dyamically retrieve the relevant query engines during query time This allows us to pass in an arbitrary number of query engine tools without worrying about prompt limitations","link":"https://docs.llamaindex.ai/en/stable/examples/query_engine/RetrieverRouterQueryEngine.html"}