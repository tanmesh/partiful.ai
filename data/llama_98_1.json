{"text":"Building an Agent around a Query Pipeline Setup Setup Text to SQL Query Engine Tool Setup ReAct Agent Pipeline Setup Simple Retry Agent Pipeline for Text to SQL Setup Data Setup Observability Define Agent Input Component Define Agent Prompt Define Agent Output Parser Tool Pipeline Stitch together Agent Query Pipeline Visualize Query Pipeline Setup Agent Worker around Text to SQL Query Pipeline Run the Agent Define Core Modules Visualize Query Pipeline Define Agent Worker  Getting Started Use Cases Understanding Optimizing Module Guides API Reference Community Contributing Changes In this cookbook we show you how to build an agent around a query pipeline Agents offer the ability to do complex sequential reasoning on top of any query DAG that you have setup Conceptually this is also one of the ways you can add a loop to the graph We show you two examples of agents you can implement a full ReAct agent that can do tool picking a simple agent that adds a retry layer around a text to sql query engine We use the chinook database as sample data Source We setup Arize Phoenix for observability Now we setup a simple text to SQL tool given a query translate text to SQL execute against database and get back a result We now setup a ReAct pipeline for a single step using our Query Pipeline syntax This is a multi part process that does the following Takes in agent inputs Calls ReAct prompt using LLM to generate next action tool or returns a response If tool action is selected call tool pipeline to execute tool collect response If response is generated get response Throughout this we ll use a variety of agent specific query components Unlike normal query pipelines these are specifically designed for query pipelines that are used in a QueryPipelineAgentWorker An AgentInputComponent that allows you to convert the agent inputs Task state dictionary into a set of inputs for the query pipeline An AgentFnComponent a general processor that allows you to take in the current Task state as well as any arbitrary inputs and returns an output In this cookbook we define a function component to format the ReAct prompt However you can put this anywhere Not used in this notebook An CustomAgentComponent similar to AgentFnComponent you can implement _run_component to define your own logic with access to Task and state It is more verbose but more flexible than AgentFnComponent e g you can define init variables and callbacks are in the base class Note that any function passed into AgentFnComponent and AgentInputComponent MUST include task and state as input variables as these are inputs passed from the agent Note that the output of an agentic query pipeline MUST be Tuple AgentChatResponse bool You ll see this below Here we define the agent input component called at the beginning of every agent step Besides passing along the input we also do initialization state modification Here we define the agent component that generates a ReAct prompt and after the output is generated from the LLM parses into a structured object Once the LLM gives an output we have a decision tree If an answer is given then we re done Process the output If an action is given we need to execute the specified tool with the specified args and then process the output Tool calling can be done via the ToolRunnerComponent module This is a simple wrapper module that takes in a list of tools and can be executed with the specified tool name every tool has a name and tool action We implement this overall module OutputAgentComponent that subclasses CustomAgentComponent Note we also implement sub_query_components to pass through higher level callback managers to the tool runner submodule We can now stitch together the top level agent pipeline agent_input react_prompt llm react_output The last component is the if else component that calls sub components This is our way to setup an agent around a text to SQL Query Pipeline Let s try the agent on some sample queries Instead of the full ReAct pipeline that does tool picking let s try a much simpler agent pipeline that only does text to SQL with retry logic We try a simple text based retry prompt where given the user input and previous conversation history can generate a modified query that outputs the right result agent input retry prompt output processor including a validation prompt","link":"https://docs.llamaindex.ai/en/stable/examples/agent/agent_runner/query_pipeline_agent.html"}